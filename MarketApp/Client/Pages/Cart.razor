@page "/cart"
@using MarketApp.Shared
@inject HttpClient Http
<div class="cart-section">
    <h2>Cart</h2>
    @if (cartItems.Count == 0)
    {
        <p>장바구니가 비었습니다.</p>
    }
    else
    {
        <div class="row">
            @foreach (var cartItem in cartItems)
            {
                <div class="col-md-12 cart-row">
                    <div class="cart-card">
                        <div class="cart-image">
                            <img src="@cartItem.Product.ImageUrl" alt="@cartItem.Product.ProductName">
                        </div>
                        <div class="cart-details">
                            <h5>@cartItem.Product.ProductName</h5>
                            <p>
                                Quantity: 
                                <button @onclick="() => UpdateQuantity(cartItem, -1)" class="quantity-button">-</button>
                                @cartItem.Quantity
                                <button @onclick="() => UpdateQuantity(cartItem, 1)" class="quantity-button">+</button>
                            </p>
                            <p>Price: $@cartItem.TotalPrice</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>



@code {
    private List<CartDto> cartItems = new List<CartDto>();

    protected override async Task OnInitializedAsync()
    {
        // 장바구니 항목을 API로부터 가져오거나 더미 데이터 사용
        cartItems = await Http.GetFromJsonAsync<List<CartDto>>("Cart");

        //base.OnInitializedAsync();
    }

    private void RemoveFromCart(int cartId)
    {
        var item = cartItems.SingleOrDefault(x => x.CartId == cartId);
        if (item != null)
        {
            cartItems.Remove(item);
        }

    }


    private async Task UpdateQuantity(CartDto cartItem, int delta)
    {
        var item = cartItems.FirstOrDefault(c => c.CartId == cartItem.CartId);
        if (item != null)
        {
            item.Quantity += delta;
            var cartInfo = new CartInfoRequest(cartItem.Product.ProductId, item.Quantity);
           
            try
            {
                var response = await Http.PutAsJsonAsync("Cart", cartInfo);
                if (!response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Failed to update cart: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while updating the cart: {ex.Message}");
            }
            
            if (item.Quantity <= 0)
            {
                cartItems.Remove(item);
            }
        }
    }


}
